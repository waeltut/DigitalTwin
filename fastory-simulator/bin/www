

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app:server');
var http = require('http');
var Configuration;
var events = require('events');
var eventEmitter = new events.EventEmitter();
var fs = require('fs');
fs.readFile('public/Configuration.json', 'utf8', function(err,data) {
		Configuration = JSON.parse(data); 
		//eventEmitter.emit('startChange');
 });
 

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/*****************************/
/**********DISCOVERY**********/
/*****************************/
	/**SENDING HELLO**/
//TODO read from configuration.json

eventEmitter.on('startChange', function(){
	Configuration.baseUrl= Configuration.Host + ':' + Configuration.Port + '/RTU/';
	var Hello = function(id, cnt){
		this.url = Configuration.baseUrl + id + '/' + Configuration.default_swagger;
		this.id = id;
		this.cnt = cnt;
	}
	var dgram = require('dgram');
	console.log('Multicasting...');
	var helloRound = 0;
	sendNext();

function sendNext(){
	if(helloRound < Configuration.rtus.length){
	var sender = dgram.createSocket({reuseAddr : true,type:'udp4'});
	var hello = JSON.stringify(new Hello(Configuration.rtus[helloRound]));
	console.log('Hello for ' + Configuration.rtus[helloRound]);
	console.log('Message:  ' + JSON.stringify(hello));
	sender.send(hello,0,hello.length, Configuration.sender.port,Configuration.sender.group, function(err, bytes)
		{
		    if (err) throw err;
		    console.log('UDP message sent to '+ Configuration.sender.group + ' '+Configuration.sender.port);
		    sender.close();
		    helloRound++;
		    sendNext();
		});
	
	}else{
		console.log('Greetings done');
		helloRound = 0;
	}
}
	
	/*****************/
	/****LISTENING****/
	var listener = dgram.createSocket({reuseAddr : true,type:'udp4'});
	listener.bind(Configuration.listener.port, function(){	
		listener.addMembership(Configuration.listener.group);
	});
	listener.reuseAddr = true;
	listener.on('listening', function () {
		var address = listener.address();
		console.log('UDP Client listening on ' + address.address + ":" + address.port);
	});
	var Client = require('node-rest-client').Client;
	var rest_client = new Client();
	function REST_POST(URL,Args)
	{
		var args = {headers:{"Content-Type": "application/json"}, data:{},requestConfig:{timeout:1000, noDelay:true, keepAlive:true,keepAliveDelay:1000},responseConfig:{timeout:1000}};
		args.data = Args;
		var req = rest_client.post(URL, args, function(data,response){});
		req.on('requestTimeout',function(req){
			console.log('request has expired');
			req.abort();
		});
		req.on('responseTimeout',function(res){
			console.log('response has expired');
		});
		req.on('error', function(err){
			console.log('request error',err.code);
		});
	}
	listener.on('message', function (message, remote) {   
		
		console.log('Discovery message from: ' + remote.address + ':' + remote.port +' - ' + message);
		try{
			var msg = JSON.parse(message.toString());
			console.log(msg)
			var url = msg.dc;
			var cnt = msg.cnt;
			if(url){
				Configuration.rtus.forEach(function(id){
				var hello = JSON.stringify(new Hello(id,cnt));
				var args = {data: {},headers:{"Content-Type": "application/json"}};
				args.data = hello;
				//rest_client.post(url, args, function(){});
				REST_POST(url,hello);
			});
			}
			else{
				console.log('message cannot be parsed');
			}
		}catch(err){
			console.log("ERROR on parsing of the message :\n"+err.message);
			console.log(message);
		}
		
	});
	/*****************/
	});

